set.seed(5143313)
n <- 200
beta <- c(-0.5,1)
var_e <- 0.25
var_x <- 2

x <- rnorm(n,0,sqrt(var_x))

eta <- beta[1] + beta[2]*x

y <- eta + rnorm(n,0,sqrt(var_e))

y_bin <- rbinom(n,1,exp(eta)/(1+exp(eta)))

#glm(y_bin ~ x, family="binomial")

y_pois <- rpois(n,exp(eta))

#glm(y_pois ~ x, family="poisson")

ui = fluidPage(
  titlePanel("Classical measurement error in linear, logit and Poisson regression"),
  
  sidebarLayout(
    sidebarPanel(
#       radioButtons("regMod", 
#                          label = "Select regression model:", 
#                          choices = list("Linear" = 1, 
#                                         "Logistic" = 2, "Poisson" = 3),
#                          selected = 1),
      selectInput("regMod", label = "Select regression model:", 
                  choices = list("Linear" = 1, "Logistic" = 2,
                                 "Poisson (log link)" = 3), 
                  selected = 1),
      
      p("You can now check the effect of classical measurement error in a covariate of linear, logistic and Poisson regression. The linear predictor of the model is given as",
      #uiOutput("tex1"),
      withMathJax(('$$ \\eta = \\beta_0 + \\beta_1 \\cdot x + \\epsilon$$')),
      " but covariate", em("x"), "is not directly observable. Instead, a substitute"),
      "$$w = x + u$$",
      "is observed, assuming that" ,
      "$$u \\sim N(0,\\sigma_u^2) .$$",
     "To check what happens when the error increases, simply move the slider below to increase the error variance in the x covariate.",
      br(),


  sliderInput("errVar", label = ("$$ \\text{Select an error variance } \\sigma_u^2 :$$"),
                                 min = 0, max = 8, value = 1,step=0.5)
  
 # textInput("text", label = "Choose a title for your plot",  value = "Error in linear regression")
  ), 
    
    mainPanel(
      plotOutput("plot",width="400pt",height="400pt"),
      textOutput("slope"),
      textOutput("resVar")
    )

  )
)

server =   function(input, output) {
  
    # create a reactive data set w(), because it will be needed in several output functions:
    w <- reactive({
       x + rnorm(n,0,sqrt(input$errVar))
    })
    
    
      output$plot <- renderPlot({
        if (input$regMod == "1") {
          plot(y~x,lwd=2,xlim=c(-7,7),ylim=c(-5,5),cex.lab=1.8,main="Correct and error-prone data and model fits",cex.main=1.5,ylab="y",xlab="x or w")
          abline(lm(y~x),lwd=2)
          
          points(y~w(), col=2,lwd=2)
          abline(lm(y~w()),col=2,lwd=2,lty=2)
          
          legend("topleft",legend=c("y~x","y~w"),col=1:2,pch=1,cex=1.5,lwd=2,lty=c(NA,NA))
        }
        
        if (input$regMod == "2") {
          plot(y_bin~x,lwd=2,xlim=c(-7,7),cex.lab=1.8,main="Correct and error-prone data and model fits",cex.main=1.5,ylab="y",xlab="x or w")
          
          r.true <- glm(y_bin ~ x, family="binomial")
          betas <- r.true$coefficients
          curve(exp(betas[1] + betas[2]*x)/ (1 + exp(betas[1] + betas[2]*x)),add=T,lwd=2)
        
          points(y_bin~w(), col=2,lwd=2)
          
          r.err <- glm(y_bin ~ w(), family="binomial")
          betas <- r.err$coefficients
          curve(exp(betas[1] + betas[2]*x)/ (1 + exp(betas[1] + betas[2]*x)),add=T,lwd=2,col=2,lty=2)
        
          
          legend("topleft",legend=c("y~x","y~w"),col=1:2,pch=1,cex=1.5,lwd=2,lty=c(NA,NA))
        }
        
        if (input$regMod == "3") {
          plot(y_pois~x,lwd=2,xlim=c(-7,7),cex.lab=1.8,main="Correct and error-prone data and model fits",cex.main=1.5,ylab="y",xlab="x or w")
          
          r.true <- glm(y_pois ~ x, family="poisson")
          betas <- r.true$coefficients
          curve(exp(betas[1] + betas[2]*x),add=T,lwd=2)
          
          points(y_pois~w(), col=2,lwd=2)
          
          r.err <- glm(y_pois ~ w(), family="poisson")
          betas <-  r.err$coefficients
          curve(exp(betas[1] + betas[2]*x),add=T,lwd=2,col=2,lty=2)
          
          legend("topleft",legend=c("y~x","y~w"),col=1:2,pch=1,cex=1.5,lwd=2,lty=c(NA,NA))
        }
        
      })
  

  
   output$slope <- renderText({
     if (input$regMod == "1") {
      paste("The slope parameter of the error prone dataset is estimated as", format(lm(y~w())$coef[2], nsmall=2,digits=2), " (true slope: 1.0).")
     }
     
     else if (input$regMod == "2") {
       paste("The slope parameter of the error prone dataset is estimated as", format(summary(glm(y_bin~w(),family="binomial"))$coef[2], nsmall=2,digits=2), " (true slope: 1.0).")
     }
     
     else if (input$regMod == "3") {
       paste("The slope parameter of the error prone dataset is estimated as", format(summary(glm(y_pois~w(),family="poisson"))$coef[2], nsmall=2,digits=2), " (true slope: 1.0).")
     }
   }) 
   
  
   output$resVar <- renderText({
     if (input$regMod == "1") {
      paste("The residual variance of the error prone model is estimated as", format(summary(lm(y~w()))$sigma^2, nsmall=2,digits=2), " (true value:", var_e,").")
     }
   }) 
  
}
